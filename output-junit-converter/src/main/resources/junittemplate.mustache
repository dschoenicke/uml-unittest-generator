package {{testClass.getPackageDeclaration}};

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;
import java.lang.reflect.*;

class {{testClass.getName}} {
	
	private static Class<?> classUnderTest;
	
	@BeforeAll
	static void loadClass() {
		try {
			classUnderTest = Class.forName("{{testClass.getClassName}}");
		} catch (ClassNotFoundException e) {
			fail("The class {{testClass.getClassName}} was not found!");
		}
	}
	
	@Test
	void testClassProperties() {
		{{#testClass.getPropertyAssertions}}
		assertEquals({{{getExpectedValue}}}, {{{getActualValue}}}, "{{getMessage}}");
		{{/testClass.getPropertyAssertions}}
	}
	
	@Test
	void testClassRelationships() {
		{{#testClass.getRelationshipAssertions}}
		assertEquals({{{getExpectedValue}}}, {{{getActualValue}}}, "{{getMessage}}");
		{{/testClass.getRelationshipAssertions}}
	}
	
	@Test
	void testClassTemplateParameters() {
		assertEquals({{testClass.getTemplateParameters.size}}, classUnderTest.getTypeParameters().length, "{{testClass.getClassName}} must have exactly {{testClass.getTemplateParameters.size}} template parameters!");
		{{^testClass.getTemplateParameters.isEmpty}}
		
		Optional<?> typeParameterUnderTest;
		{{#testClass.getTemplateParameters}}
		typeParameterUnderTest = java.util.Arrays.asList(classUnderTest.getTypeParameters()).stream().filter(type -> type.getTypeName().equals("{{getName}}")).findFirst();
		{{#getAssertions}}
		assertEquals({{{getExpectedValue}}}, {{{getActualValue}}}, "{{getMessage}}");
		{{/getAssertions}}
		{{/testClass.getTemplateParameters}}
		{{/testClass.getTemplateParameters.isEmpty}}
	}
	
	{{^testClass.getEnumConstantAssertions.isEmpty}}
	@Test
	void testEnumConstants() {
		{{#testClass.getEnumConstantAssertions}}
		assertEquals({{{getExpectedValue}}}, {{{getActualValue}}}, "{{getMessage}}");
		{{/testClass.getEnumConstantAssertions}}
	}
	{{/testClass.getEnumConstantAssertions.isEmpty}}
	
	@Test
	void testClassFields() {
		assertEquals({{testClass.getFields.size}}, classUnderTest.getDeclaredFields().length, "{{testClass.getClassName}} must have exactly {{testClass.getFields.size}} fields!");
		{{#testClass.getFields}}
		
		try {
			Field fieldUnderTest = classUnderTest.getDeclaredField("{{getName}}");
			{{#getAssertions}}
			assertEquals({{{getExpectedValue}}}, {{{getActualValue}}}, "{{{getMessage}}}");
			{{/getAssertions}}
			{{#isMultiplicity}}
			
			if (fieldUnderTest.getClass().isArray()) {
				assertEquals("{{{getType}}}[]", fieldUnderTest.getType().getSimpleName(), "{{testClass.getClassName}}#{{getName}} must be of type {{{getType}}}[]!");
			}
			else {
				String genericTypes = getGenericTypes(fieldUnderTest.getGenericType());
				assertEquals("{{{getType}}}", fieldUnderTest.getType().getSimpleName() + "<" + genericTypes + ">", "{{testClass.getClassName}}#{{getName}} must be of type {{{getType}}}!");
			}
			{{/isMultiplicity}}
			{{^isMultiplicity}}
			{{#isOptional}}
			
			String genericTypes = getGenericTypes(fieldUnderTest.getGenericType());
			assertEquals("Optional<{{{getType}}}>", fieldUnderTest.getType().getSimpleName() + "<" + genericTypes + ">", "{{testClass.getClassName}}#{{getName}} must be of type Optional<{{{getType}}}>!");
			{{/isOptional}}
			{{/isMultiplicity}}
		} catch (NoSuchFieldException | SecurityException e) {
			fail("{{testClass.getClassName}} is expected to have a field with name {{getName}}!");
		}
		{{/testClass.getFields}}
	}
	
	@Test
	void testClassConstructors() {
		assertEquals({{testClass.getConstructors.size}}, classUnderTest.getDeclaredConstructors().length, "{{testClass.getClassName}} must have exactly {{testClass.getConstructors.size}} constructors!");
		{{#testClass.getConstructors}}
		
		try {
			Constructor<?> constructorUnderTest = classUnderTest.getDeclaredConstructor({{getParameterTypeClasses}});
			{{#getAssertions}}
			assertEquals({{{getExpectedValue}}}, {{getActualValue}}, "{{{getMessage}}}");
			{{/getAssertions}}
			{{^getParameters.isEmpty}}
			
			Parameter parameterUnderTest;
			Type genericParameter;
			int counter = 0;
			String genericTypes = "";
			{{#getParameters}}
			
			parameterUnderTest = constructorUnderTest.getParameters()[counter];
			assertEquals({{{getAssertion.getExpectedValue}}}, {{{getAssertion.getActualValue}}}, "{{{getAssertion.getMessage}}}");
			genericParameter = constructorUnderTest.getGenericParameterTypes()[counter];
			genericTypes = getGenericTypes(genericParameter);
			genericTypes = (!genericTypes.isEmpty() ? "<" + genericTypes + ">" : genericTypes);
			assertEquals("{{{getType}}}".substring("{{{getType}}}".lastIndexOf('.') + 1), parameterUnderTest.getType().getSimpleName() + genericTypes, "The parameter {{getName}} of the constructor with parameters ({{getParameterTypes}}) in {{testClass.getClassName}} must be of type {{{getType}}}!");
			counter ++;
			{{/getParameters}}
			{{/getParameters.isEmpty}}
		} catch (NoSuchMethodException | SecurityException e) {
			fail("{{testClass.getClassName}} must have a constructor with parameters ({{getParameterTypes}})");
		}
		{{/testClass.getConstructors}}
	}
	
	@Test
	void testClassMethods() {
		assertEquals({{testClass.getMethods.size}}, classUnderTest.getDeclaredMethods().length, "{{testClass.getClassName}} must have exactly {{testClass.getMethods.size}} methods!");
		{{#testClass.getMethods}}
		
		try {
			Method methodUnderTest = classUnderTest.getDeclaredMethod("{{getMethodName}}"{{^getParameters.isEmpty}}, {{/getParameters.isEmpty}}{{getParameterTypeClasses}});
			{{#getAssertions}}
			assertEquals({{{getExpectedValue}}}, {{getActualValue}}, "{{{getMessage}}}");
			{{/getAssertions}}
			
			{{#isMultiplicity}}
			
			if (methodUnderTest.getReturnType().isArray()) {
				assertEquals("{{{getReturnType}}}[]", methodUnderTest.getReturnType().getSimpleName(), "The return type of {{testClass.getClassName}}#{{getMethodName}} must be of type {{{getReturnType}}}[]!");
			}
			else {
				String genericTypes = getGenericTypes(methodUnderTest.getGenericReturnType());
				assertEquals("{{{getReturnType}}}", methodUnderTest.getReturnType().getSimpleName() + "<" + genericTypes + ">", "The return type of the method {{testClass.getClassName}}#{{getMethodName}} must be of type {{{getReturnType}}}!");
			}
			{{/isMultiplicity}}
			{{^isMultiplicity}}
			{{#isOptional}}
			
			String genericTypes = getGenericTypes(methodUnderTest.getGenericReturnType());
			assertEquals("Optional<{{{getReturnType}}}>", methodUnderTest.getReturnType().getSimpleName() + "<" + genericTypes + ">", "The return type of the method {{testClass.getClassName}}#{{getMethodName}} must be of type Optional<{{{getReturnType}}}>!");
			{{/isOptional}}
			{{/isMultiplicity}}
			{{^getParameters.isEmpty}}
			
			Parameter parameterUnderTest;
			Type genericParameter;
			String genericTypes = "";
			int counter = 0;
			{{#getParameters}}
			
			parameterUnderTest = methodUnderTest.getParameters()[counter];
			assertEquals({{{getAssertion.getExpectedValue}}}, {{{getAssertion.getActualValue}}}, "{{{getAssertion.getMessage}}}");
			genericParameter = methodUnderTest.getGenericParameterTypes()[counter];
			genericTypes = getGenericTypes(genericParameter);
			genericTypes = (!genericTypes.isEmpty() ? "<" + genericTypes + ">" : genericTypes);
			assertEquals("{{{getType}}}".substring("{{{getType}}}".lastIndexOf('.') + 1), parameterUnderTest.getType().getSimpleName() + genericTypes, "The parameter {{getName}} of the method {{getMethodName}} with parameters ({{getParameterTypes}}) in {{testClass.getClassName}} must be of type {{{getType}}}!");
			counter ++;
			{{/getParameters}}
			{{/getParameters.isEmpty}}
		} catch (NoSuchMethodException | SecurityException e) {
			fail("{{testClass.getClassName}} must have a method named {{getMethodName}} with parameters ({{getParameterTypes}})");
		}
		{{/testClass.getMethods}}
	}
	
	String getGenericTypes(Type type) throws ClassCastException {
		StringBuilder genericTypes = new StringBuilder("");
		
		try {
			for (int i = 0; i < ((ParameterizedType) type).getActualTypeArguments().length; i++) {
				StringBuilder genericType = new StringBuilder(
						(((ParameterizedType) type).getActualTypeArguments()[i].getTypeName() + ", "));
				genericType = new StringBuilder(genericType.substring(genericType.lastIndexOf(".") + 1));
				genericTypes.append(genericType);
			}
			
			if (!genericTypes.toString().isEmpty()) {
				genericTypes = new StringBuilder(genericTypes.substring(0, genericTypes.length() - 2));
			}
		} catch (ClassCastException e) {
			return "";
		}
		
		return genericTypes.toString();
	}
}
	